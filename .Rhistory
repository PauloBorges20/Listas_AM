?
solve
M <- matrix(c(12,-1,-5,0,-1,7,2,-1,-5,2,10,1,0,-1,1-3), nrow = 4)
M <- matrix(c(12,-1,-5,0,-1,7,2,-1,-5,2,10,1,0,-1,1,-3), nrow = 4)
B <- matix(c(1,2,3,4), nrow = 4)
B <- matix(c(1,2,3,4), nrow = 4)
B <- matrix(c(1,2,3,4), nrow = 4)
B
M
solve(M,B)
solve(B,M)
solve(M,B, tol, LINPACK = FALSE)
solve(M,B)
solve.qr(M,B)
solve(M,B)
x <- solve(M,B)
X
x
cat("x = [",x,"]\n")
cat("x = [",as.numeric(M%*%x,"]\n")
q
quit()
x
View(B)
View(B)
B <- c(1,2,3,4)
solve(M,B)
solve(a = M, b = B)
git.push()
b <- c(1,2,3,4)
#Questão 1
A <- matrix(c(12,-1,-5,0,-1,7,2,-1,-5,2,10,1,0,-1,1,3), nrow=4)
solve(A,b)
result <- solve(A,b)
result
View(A)
View(M)
View(A)
View(M)
View(M)
View(A)
rm(M)
rm(x)
rm(B)
source("~/Listas_AM/Lista00.R")
git status
?
ggplot2
ggplot
library(ggplot2)
library("ggplot2")
??ggplot2
install.packages("tidyverse")
?
ggplot2
library(ggplot2)
#Questão 3
tabela <- tibble(
cos = c(sqrt(3)/2, sqrt(2)/2, 1/2),
sen = c(1/2, sqrt(2)/2, sqrt(3)/2)
)
tabela
library(tibble)
tabela
#Questão 3
library(tibble)
tabela <- tibble(
cos = c(sqrt(3)/2, sqrt(2)/2, 1/2),
sen = c(1/2, sqrt(2)/2, sqrt(3)/2)
)
View(tabela)
tabela
library(ggplot2)
rm(cos)
rs(cos)
rm(tabela.cos)
rm(tabela)
)
)
tabela <- tibble(
cos = c(cos(-2pi), cos((-3pi)/2), cos(-pi), cos(-pi/2), cos(0) , cos(pi/2), cos(pi), cos((3pi))/2, cos(2pi)),
tabela <- tibble(
cos = c(cos(-2*pi), cos((-3*pi)/2), cos(-pi), cos(-pi/2), cos(0) , cos(pi/2), cos(pi), cos((3*pi))/2, cos(2*pi)),
sen = c(sen(-2*pi), sen((-3*pi)/2), sen(-pi), sen(-pi/2), sen(0) , sen(pi/2), sen(pi), sen((3*pi))/2, sen(2*pi))
)
tabela <- tibble(
cos = c(cos(-2*pi), cos((-3*pi)/2), cos(-pi), cos(-pi/2), cos(0) , cos(pi/2), cos(pi), cos((3*pi))/2, cos(2*pi)),
sen = c(sin(-2*pi), sin((-3*pi)/2), sin(-pi), sin(-pi/2), sin(0) , sin(pi/2), sin(pi), sin((3*pi))/2, sin(2*pi))
)
View(tabela)
# Exibir o gráfico
grafico
# Criar o gráfico das funções cosseno e seno
ggplot(tabela, aes(x = seq_along(cos), y = cos, color = "Cosseno")) +
geom_line() +
geom_point() +
geom_line(aes(y = sen, color = "Seno")) +
geom_point(aes(y = sen, color = "Seno")) +
scale_color_manual(values = c("Cosseno" = "blue", "Seno" = "red")) +
labs(x = "Ângulo", y = "Valor", color = "Função") +
theme_minimal()
# Exibir o gráfico
# Criar o gráfico das funções cosseno e seno
ggplot(tabela) +
geom_line(aes(x = 1:length(cos), y = cos, color = "Cosseno")) +
geom_point(aes(x = 1:length(cos), y = cos, color = "Cosseno")) +
geom_line(aes(x = 1:length(sen), y = sen, color = "Seno")) +
geom_point(aes(x = 1:length(sen), y = sen, color = "Seno")) +
scale_color_manual(values = c("Cosseno" = "blue", "Seno" = "red")) +
labs(x = "Ângulo", y = "Valor", color = "Função") +
theme_minimal()
# Criar o gráfico das funções cosseno e seno
ggplot(tabela) +
geom_line(aes(x = 1:length(cos), y = cos, color = "Cosseno")) +
geom_point(aes(x = 1:length(cos), y = cos, color = "Cosseno")) +
geom_line(aes(x = 1:length(sen), y = sen, color = "Seno")) +
geom_point(aes(x = 1:length(sen), y = sen, color = "Seno")) +
scale_color_manual(values = c("Cosseno" = "blue", "Seno" = "red")) +
labs(x = "Ângulo", y = "Valor", color = "Função") +
theme_minimal()
tabela <- tibble(
cos = c(cos(-2*pi), cos((-3*pi)/2), cos(-pi), cos(-pi/2), cos(0) , cos(pi/2), cos(pi), cos((3*pi)/2), cos(2*pi)),
sen = c(sin(-2*pi), sin((-3*pi)/2), sin(-pi), sin(-pi/2), sin(0) , sin(pi/2), sin(pi), sin((3*pi)/2), sin(2*pi))
)
# Criar o gráfico das funções cosseno e seno
ggplot(tabela) +
geom_line(aes(x = 1:length(cos), y = cos, color = "Cosseno")) +
geom_point(aes(x = 1:length(cos), y = cos, color = "Cosseno")) +
geom_line(aes(x = 1:length(sen), y = sen, color = "Seno")) +
geom_point(aes(x = 1:length(sen), y = sen, color = "Seno")) +
scale_color_manual(values = c("Cosseno" = "blue", "Seno" = "red")) +
labs(x = "Ângulo", y = "Valor", color = "Função") +
theme_minimal()
A <- matrix(c(12,-1,-5,0,-1,7,2,-1,-5,2,10,1,0,-1,1,3), nrow=4)
b <- c(1,2,3,4)
result <- solve(A,b)
result
result <- solve(A,b)
result
result <- solve(A,b)
print(result)
A
b
A
b
A <- matrix(c(12,-1,-5,0,-1,7,2,-1,-5,2,10,1,0,-1,1,3), nrow=4)
b <- matrix(c(1,2,3,4), nrow=4)
View(b)
result <- solve(A,b)
view(result)
#Questão 1
A <- matrix(c(12,-1,-5,0,-1,7,2,-1,-5,2,10,1,0,-1,1,3), nrow=4)
b <- matrix(c(1,2,3,4), nrow=4)
A
b
result <- solve(A,b)
print(result)
#Questão 3
library(tibble)
sub_um<- A[1,1]
sub_dois<-A[1:2,1:2]
sub_tres<-A[1:2:3, 1:2:3]
sub_um<- A[1:1,1:1]
View(sub_dois)
View(sub_dois)
sub_um<- matrix(A[1:1,1:1])
#Questão 2
sub_um<- A[1:1,1:1]
View(sub_dois)
View(sub_dois)
View(sub_dois)
View(sub_dois)
View(sub_tres)
View(sub_tres)
#Questão 2
sub_um<- A[1:4,1:4]
View(sub_um)
View(sub_um)
#Questão 2
sub_um<- A[,1]
#Questão 2
sub_um<- A[1,1]
#Questão 2
sub_um<- A[1:1,1:1]
sub_tres<-A[-4, -4]
View(sub_tres)
View(sub_tres)
View(A)
print(dados)
#Questão 2
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados)
determante_funcao <- function(dados){
for(d in dados){
det(d)
}
}
determinante_funcao
determinante_funcao(dados)
determante_funcao(dados)
det(d)
determante_funcao(dados)
det(dados)
d++
}
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
det(dados[d])
d++
}
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
det(dados[d])
}
}
determinante_funcao(dados)
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
det(d)
}
}
determinante_funcao(dados)
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
det(d)
}
}
print(determinante_funcao(dados))
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
determinant(d)
}
}
print(determinante_funcao(dados))
View(determinante_funcao)
print(dados[2:3])
print(dados[2])
print(dados[3])
print(dados[1])
print(dados[2])
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
print(dados[2])
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
print(a)
}
}
print(determinante_funcao(dados))
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
print(a)
}
}
print(determinante_funcao(dados))
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
print(a)
}
}
determante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
print(a)
}
}
determante_funcao(dados)
rm(determante_funcao)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
print(a)
}
}
determinante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados){
a<- det(d)
print(a)
}
}
determinante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
return "TRUE"
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
}
else{
resultado <- "FALSE"
}
return(resultado)
}
}
determinante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
}
else{
resultado <- "FALSE"
}
}
return(resultado)
}
determinante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
return(resultado)
}
else{
resultado <- "FALSE"
return(resultado)
}
}
}
determinante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
}
else{
resultado <- "FALSE"
}
}
}
determinante_funcao(dados)
dados <- list(sub_um<- A[1:1,1:1],sub_dois<-A[1:2,1:2],sub_tres<-A[-4, -4])
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
print(resultado) + \n
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
print(resultado) + "\n"
}
else{
resultado <- "FALSE"
}
}
}
determinante_funcao(dados)
determinante_funcao <- function(dados){
for(d in dados[2:3]){
a<- det(d)
if(a > 0){
resultado <- "TRUE"
print(resultado)
}
else{
resultado <- "FALSE"
print(resultado)
}
}
}
determinante_funcao(dados)
use_git_config(user.name = "PauloBorges", user.email = "paulohenriquesousa11@outlook.com")
library(usethis)
use_git_config(user.name = "PauloBorges", user.email = "paulohenriquesousa11@outlook.com")
gitcreds
git_credentials()
library(usethis)
use_git_config(user.name = "PauloBorges", user.email = "paulohenriquesousa11@outlook.com")
